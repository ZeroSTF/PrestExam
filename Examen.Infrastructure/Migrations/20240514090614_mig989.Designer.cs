// <auto-generated />
using System;
using Examen.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Examen.Infrastructure.Migrations
{
    [DbContext(typeof(ExamContext))]
    [Migration("20240514090614_mig989")]
    partial class mig989
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("CoordonneesTel")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClientId");

                    b.HasIndex("CoordonneesTel");

                    b.ToTable("clients");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Coordonnees", b =>
                {
                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Tel");

                    b.ToTable("Coordonnees");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Prestataire", b =>
                {
                    b.Property<int>("PrestataireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrestataireId"));

                    b.Property<int>("Appreciation")
                        .HasColumnType("int");

                    b.Property<string>("PrestataireNom")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PrestatairePhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrestataireTel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecialiteFK")
                        .HasColumnType("int");

                    b.Property<double>("TarifHoraire")
                        .HasColumnType("float");

                    b.HasKey("PrestataireId");

                    b.HasIndex("SpecialiteFK");

                    b.ToTable("prestataires");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Prestation", b =>
                {
                    b.Property<int>("ClientFK")
                        .HasColumnType("int");

                    b.Property<int>("PrestataireFK")
                        .HasColumnType("int");

                    b.Property<DateTime>("HeureDebut")
                        .HasColumnType("datetime2")
                        .HasColumnName("HeureRDV");

                    b.Property<int>("NbrHeures")
                        .HasColumnType("int");

                    b.HasKey("ClientFK", "PrestataireFK", "HeureDebut");

                    b.HasIndex("PrestataireFK");

                    b.ToTable("prestations");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Specialite", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Intitule")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.ToTable("specialites");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Client", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Coordonnees", "Coordonnees")
                        .WithMany()
                        .HasForeignKey("CoordonneesTel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coordonnees");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Prestataire", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Specialite", "Specialite")
                        .WithMany("Prestataires")
                        .HasForeignKey("SpecialiteFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialite");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Prestation", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Client", "Client")
                        .WithMany("Prestations")
                        .HasForeignKey("ClientFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Examen.ApplicationCore.Domain.Prestataire", "Prestataire")
                        .WithMany("Prestations")
                        .HasForeignKey("PrestataireFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Prestataire");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Client", b =>
                {
                    b.Navigation("Prestations");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Prestataire", b =>
                {
                    b.Navigation("Prestations");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Specialite", b =>
                {
                    b.Navigation("Prestataires");
                });
#pragma warning restore 612, 618
        }
    }
}
